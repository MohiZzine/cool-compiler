; ModuleID = 'cool_module'
@.str0 = private unnamed_addr constant [17 x i8] c"Factorial of 5: \00"
@.str1 = private unnamed_addr constant [2 x i8] c"
\00"
@.str2 = private unnamed_addr constant [18 x i8] c"Fibonacci of 10: \00"
@.str3 = private unnamed_addr constant [16 x i8] c"2 raised to 8: \00"
@.str4 = private unnamed_addr constant [19 x i8] c"GCD of 54 and 24: \00"
@.str5 = private unnamed_addr constant [30 x i8] c"Sum of numbers from 1 to 10: \00"
@.str6 = private unnamed_addr constant [41 x i8] c"Select operation (addition) on 7 and 3: \00"
@.str7 = private unnamed_addr constant [45 x i8] c"Select operation (substraction) on 7 and 3: \00"
@.str8 = private unnamed_addr constant [43 x i8] c"Complex computation with x = 4 and y = 5: \00"
@.str9 = private unnamed_addr constant [7 x i8] c"Object\00"
define i8* @Calculator_new() {
  %size = add i32 8, 0
  %ptr = call i8* @malloc(i32 %size)
  ret i8* %ptr
}
define i32 @Calculator_factorial(i8* %self, i32 %n) {
  %t0 = alloca i8*
  store i8* %self, i8** %t0
  %t1 = alloca i32
  store i32 %n, i32* %t1
  %t3 = alloca i32
  %t4 = load i32, i32* %t1
  %t5 = icmp slt i32 %t4, 2
  %t6 = zext i1 %t5 to i32
  %t7 = icmp ne i32 %t6, 0
  br i1 %t7, label %if_then_t2, label %if_else_t2
if_then_t2:
  store i32 1, i32* %t3
  br label %if_end_t2
if_else_t2:
  %t8 = load i32, i32* %t1
  %t9 = load i8*, i8** %t0
  %t10 = load i32, i32* %t1
  %t11 = sub i32 %t10, 1
  %t12 = call i32 (i8*, i32) @Calculator_factorial(i8* %t9, i32 %t11)
  %t13 = mul i32 %t8, %t12
  store i32 %t13, i32* %t3
  br label %if_end_t2
if_end_t2:
  %t14 = load i32, i32* %t3
  ret i32 %t14
}

define i32 @Calculator_fib(i8* %self, i32 %n) {
  %t15 = alloca i8*
  store i8* %self, i8** %t15
  %t16 = alloca i32
  store i32 %n, i32* %t16
  %t18 = alloca i32
  %t19 = load i32, i32* %t16
  %t20 = icmp slt i32 %t19, 2
  %t21 = zext i1 %t20 to i32
  %t22 = icmp ne i32 %t21, 0
  br i1 %t22, label %if_then_t17, label %if_else_t17
if_then_t17:
  %t23 = load i32, i32* %t16
  store i32 %t23, i32* %t18
  br label %if_end_t17
if_else_t17:
  %t24 = load i8*, i8** %t15
  %t25 = load i32, i32* %t16
  %t26 = sub i32 %t25, 1
  %t27 = call i32 (i8*, i32) @Calculator_fib(i8* %t24, i32 %t26)
  %t28 = load i8*, i8** %t15
  %t29 = load i32, i32* %t16
  %t30 = sub i32 %t29, 2
  %t31 = call i32 (i8*, i32) @Calculator_fib(i8* %t28, i32 %t30)
  %t32 = add i32 %t27, %t31
  store i32 %t32, i32* %t18
  br label %if_end_t17
if_end_t17:
  %t33 = load i32, i32* %t18
  ret i32 %t33
}

define i32 @Calculator_power(i8* %self, i32 %base, i32 %exp) {
  %t34 = alloca i8*
  store i8* %self, i8** %t34
  %t35 = alloca i32
  store i32 %base, i32* %t35
  %t36 = alloca i32
  store i32 %exp, i32* %t36
  %t38 = alloca i32
  %t39 = load i32, i32* %t36
  %t40 = icmp eq i32 %t39, 0
  %t41 = zext i1 %t40 to i32
  %t42 = icmp ne i32 %t41, 0
  br i1 %t42, label %if_then_t37, label %if_else_t37
if_then_t37:
  store i32 1, i32* %t38
  br label %if_end_t37
if_else_t37:
  %t43 = load i32, i32* %t35
  %t44 = load i8*, i8** %t34
  %t45 = load i32, i32* %t35
  %t46 = load i32, i32* %t36
  %t47 = sub i32 %t46, 1
  %t48 = call i32 (i8*, i32, i32) @Calculator_power(i8* %t44, i32 %t45, i32 %t47)
  %t49 = mul i32 %t43, %t48
  store i32 %t49, i32* %t38
  br label %if_end_t37
if_end_t37:
  %t50 = load i32, i32* %t38
  ret i32 %t50
}

define i32 @Calculator_gcd(i8* %self, i32 %a, i32 %b) {
  %t51 = alloca i8*
  store i8* %self, i8** %t51
  %t52 = alloca i32
  store i32 %a, i32* %t52
  %t53 = alloca i32
  store i32 %b, i32* %t53
  %t55 = alloca i32
  %t56 = load i32, i32* %t52
  %t57 = load i32, i32* %t53
  %t58 = icmp eq i32 %t56, %t57
  %t59 = zext i1 %t58 to i32
  %t60 = icmp ne i32 %t59, 0
  br i1 %t60, label %if_then_t54, label %if_else_t54
if_then_t54:
  %t61 = load i32, i32* %t52
  store i32 %t61, i32* %t55
  br label %if_end_t54
if_else_t54:
  %t63 = alloca i32
  %t64 = load i32, i32* %t52
  %t65 = load i32, i32* %t53
  %t66 = icmp slt i32 %t64, %t65
  %t67 = zext i1 %t66 to i32
  %t68 = icmp ne i32 %t67, 0
  br i1 %t68, label %if_then_t62, label %if_else_t62
if_then_t62:
  %t69 = load i8*, i8** %t51
  %t70 = load i32, i32* %t52
  %t71 = load i32, i32* %t53
  %t72 = load i32, i32* %t52
  %t73 = sub i32 %t71, %t72
  %t74 = call i32 (i8*, i32, i32) @Calculator_gcd(i8* %t69, i32 %t70, i32 %t73)
  store i32 %t74, i32* %t63
  br label %if_end_t62
if_else_t62:
  %t75 = load i8*, i8** %t51
  %t76 = load i32, i32* %t52
  %t77 = load i32, i32* %t53
  %t78 = sub i32 %t76, %t77
  %t79 = load i32, i32* %t53
  %t80 = call i32 (i8*, i32, i32) @Calculator_gcd(i8* %t75, i32 %t78, i32 %t79)
  store i32 %t80, i32* %t63
  br label %if_end_t62
if_end_t62:
  %t81 = load i32, i32* %t63
  store i32 %t81, i32* %t55
  br label %if_end_t54
if_end_t54:
  %t82 = load i32, i32* %t55
  ret i32 %t82
}

define i32 @Calculator_sum_range(i8* %self, i32 %start, i32 %end) {
  %t83 = alloca i8*
  store i8* %self, i8** %t83
  %t84 = alloca i32
  store i32 %start, i32* %t84
  %t85 = alloca i32
  store i32 %end, i32* %t85
  %t86 = alloca i32
  store i32 0, i32* %t86
  %t87 = alloca i32
  %t88 = load i32, i32* %t84
  store i32 %t88, i32* %t87
  br label %t89
t89:
  %t92 = load i32, i32* %t87
  %t93 = load i32, i32* %t85
  %t94 = icmp sle i32 %t92, %t93
  %t95 = zext i1 %t94 to i32
  %t96 = icmp ne i32 %t95, 0
  br i1 %t96, label %t90, label %t91
t90:
  %t97 = load i32, i32* %t86
  %t98 = load i32, i32* %t87
  %t99 = add i32 %t97, %t98
  store i32 %t99, i32* %t86
  %t100 = load i32, i32* %t87
  %t101 = add i32 %t100, 1
  store i32 %t101, i32* %t87
  br label %t89
t91:
  %t102 = load i32, i32* %t86
  ret i32 %t102
}

define i32 @Calculator_selectOperation(i8* %self, i32 %op, i32 %a, i32 %b) {
  %t103 = alloca i8*
  store i8* %self, i8** %t103
  %t104 = alloca i32
  store i32 %op, i32* %t104
  %t105 = alloca i32
  store i32 %a, i32* %t105
  %t106 = alloca i32
  store i32 %b, i32* %t106
  %t108 = alloca i32
  %t109 = load i32, i32* %t104
  %t110 = icmp eq i32 %t109, 0
  %t111 = zext i1 %t110 to i32
  %t112 = icmp ne i32 %t111, 0
  br i1 %t112, label %if_then_t107, label %if_else_t107
if_then_t107:
  %t113 = load i32, i32* %t105
  %t114 = load i32, i32* %t106
  %t115 = add i32 %t113, %t114
  store i32 %t115, i32* %t108
  br label %if_end_t107
if_else_t107:
  %t117 = alloca i32
  %t118 = load i32, i32* %t104
  %t119 = icmp eq i32 %t118, 1
  %t120 = zext i1 %t119 to i32
  %t121 = icmp ne i32 %t120, 0
  br i1 %t121, label %if_then_t116, label %if_else_t116
if_then_t116:
  %t122 = load i32, i32* %t105
  %t123 = load i32, i32* %t106
  %t124 = sub i32 %t122, %t123
  store i32 %t124, i32* %t117
  br label %if_end_t116
if_else_t116:
  %t126 = alloca i32
  %t127 = load i32, i32* %t104
  %t128 = icmp eq i32 %t127, 2
  %t129 = zext i1 %t128 to i32
  %t130 = icmp ne i32 %t129, 0
  br i1 %t130, label %if_then_t125, label %if_else_t125
if_then_t125:
  %t131 = load i32, i32* %t105
  %t132 = load i32, i32* %t106
  %t133 = mul i32 %t131, %t132
  store i32 %t133, i32* %t126
  br label %if_end_t125
if_else_t125:
  %t135 = alloca i32
  %t136 = load i32, i32* %t104
  %t137 = icmp eq i32 %t136, 3
  %t138 = zext i1 %t137 to i32
  %t139 = icmp ne i32 %t138, 0
  br i1 %t139, label %if_then_t134, label %if_else_t134
if_then_t134:
  %t141 = alloca i32
  %t142 = load i32, i32* %t106
  %t143 = icmp eq i32 %t142, 0
  %t144 = zext i1 %t143 to i32
  %t145 = icmp ne i32 %t144, 0
  br i1 %t145, label %if_then_t140, label %if_else_t140
if_then_t140:
  store i32 0, i32* %t141
  br label %if_end_t140
if_else_t140:
  %t146 = load i32, i32* %t105
  %t147 = load i32, i32* %t106
  %t148 = sdiv i32 %t146, %t147
  store i32 %t148, i32* %t141
  br label %if_end_t140
if_end_t140:
  %t149 = load i32, i32* %t141
  store i32 %t149, i32* %t135
  br label %if_end_t134
if_else_t134:
  store i32 0, i32* %t135
  br label %if_end_t134
if_end_t134:
  %t150 = load i32, i32* %t135
  store i32 %t150, i32* %t126
  br label %if_end_t125
if_end_t125:
  %t151 = load i32, i32* %t126
  store i32 %t151, i32* %t117
  br label %if_end_t116
if_end_t116:
  %t152 = load i32, i32* %t117
  store i32 %t152, i32* %t108
  br label %if_end_t107
if_end_t107:
  %t153 = load i32, i32* %t108
  ret i32 %t153
}

define i32 @Calculator_computeExpression(i8* %self, i32 %x, i32 %y) {
  %t154 = alloca i8*
  store i8* %self, i8** %t154
  %t155 = alloca i32
  store i32 %x, i32* %t155
  %t156 = alloca i32
  store i32 %y, i32* %t156
  %t157 = alloca i32
  %t158 = load i8*, i8** %t154
  %t159 = load i32, i32* %t155
  %t160 = call i32 (i8*, i32) @Calculator_factorial(i8* %t158, i32 %t159)
  store i32 %t160, i32* %t157
  %t161 = alloca i32
  %t162 = load i8*, i8** %t154
  %t163 = load i32, i32* %t156
  %t164 = call i32 (i8*, i32) @Calculator_fib(i8* %t162, i32 %t163)
  store i32 %t164, i32* %t161
  %t165 = alloca i32
  %t166 = load i8*, i8** %t154
  %t167 = load i32, i32* %t155
  %t168 = load i32, i32* %t156
  %t169 = call i32 (i8*, i32, i32) @Calculator_power(i8* %t166, i32 %t167, i32 %t168)
  store i32 %t169, i32* %t165
  %t170 = alloca i32
  %t171 = load i8*, i8** %t154
  %t172 = load i32, i32* %t157
  %t173 = load i32, i32* %t161
  %t174 = add i32 %t173, 1
  %t175 = call i32 (i8*, i32, i32) @Calculator_gcd(i8* %t171, i32 %t172, i32 %t174)
  store i32 %t175, i32* %t170
  %t176 = load i32, i32* %t157
  %t177 = load i32, i32* %t161
  %t178 = load i32, i32* %t165
  %t179 = mul i32 %t177, %t178
  %t180 = add i32 %t176, %t179
  %t181 = load i32, i32* %t170
  %t182 = sub i32 %t180, %t181
  ret i32 %t182
}

define i8* @Main_new() {
  %size = add i32 8, 0
  %ptr = call i8* @malloc(i32 %size)
  ret i8* %ptr
}
define i8* @Main_main(i8* %self) {
  %t183 = alloca i8*
  store i8* %self, i8** %t183
  %t184 = alloca i8*
  %t185 = call i8* @Calculator_new()
  store i8* %t185, i8** %t184
  %t186 = load i8*, i8** %t183
  %t187 = getelementptr [17 x i8], [17 x i8]* @.str0, i32 0, i32 0
  %t188 = call i8* (i8*, i8*) @IO_out_string(i8* %t186, i8* %t187)
  %t189 = load i8*, i8** %t183
  %t190 = load i8*, i8** %t184
  %t191 = call i32 (i8*, i32) @Calculator_factorial(i8* %t190, i32 5)
  %t192 = call i8* (i8*, i32) @IO_out_int(i8* %t189, i32 %t191)
  %t193 = load i8*, i8** %t183
  %t194 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t195 = call i8* (i8*, i8*) @IO_out_string(i8* %t193, i8* %t194)
  %t196 = load i8*, i8** %t183
  %t197 = getelementptr [18 x i8], [18 x i8]* @.str2, i32 0, i32 0
  %t198 = call i8* (i8*, i8*) @IO_out_string(i8* %t196, i8* %t197)
  %t199 = load i8*, i8** %t183
  %t200 = load i8*, i8** %t184
  %t201 = call i32 (i8*, i32) @Calculator_fib(i8* %t200, i32 10)
  %t202 = call i8* (i8*, i32) @IO_out_int(i8* %t199, i32 %t201)
  %t203 = load i8*, i8** %t183
  %t204 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t205 = call i8* (i8*, i8*) @IO_out_string(i8* %t203, i8* %t204)
  %t206 = load i8*, i8** %t183
  %t207 = getelementptr [16 x i8], [16 x i8]* @.str3, i32 0, i32 0
  %t208 = call i8* (i8*, i8*) @IO_out_string(i8* %t206, i8* %t207)
  %t209 = load i8*, i8** %t183
  %t210 = load i8*, i8** %t184
  %t211 = call i32 (i8*, i32, i32) @Calculator_power(i8* %t210, i32 2, i32 8)
  %t212 = call i8* (i8*, i32) @IO_out_int(i8* %t209, i32 %t211)
  %t213 = load i8*, i8** %t183
  %t214 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t215 = call i8* (i8*, i8*) @IO_out_string(i8* %t213, i8* %t214)
  %t216 = load i8*, i8** %t183
  %t217 = getelementptr [19 x i8], [19 x i8]* @.str4, i32 0, i32 0
  %t218 = call i8* (i8*, i8*) @IO_out_string(i8* %t216, i8* %t217)
  %t219 = load i8*, i8** %t183
  %t220 = load i8*, i8** %t184
  %t221 = call i32 (i8*, i32, i32) @Calculator_gcd(i8* %t220, i32 54, i32 24)
  %t222 = call i8* (i8*, i32) @IO_out_int(i8* %t219, i32 %t221)
  %t223 = load i8*, i8** %t183
  %t224 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t225 = call i8* (i8*, i8*) @IO_out_string(i8* %t223, i8* %t224)
  %t226 = load i8*, i8** %t183
  %t227 = getelementptr [30 x i8], [30 x i8]* @.str5, i32 0, i32 0
  %t228 = call i8* (i8*, i8*) @IO_out_string(i8* %t226, i8* %t227)
  %t229 = load i8*, i8** %t183
  %t230 = load i8*, i8** %t184
  %t231 = call i32 (i8*, i32, i32) @Calculator_sum_range(i8* %t230, i32 1, i32 10)
  %t232 = call i8* (i8*, i32) @IO_out_int(i8* %t229, i32 %t231)
  %t233 = load i8*, i8** %t183
  %t234 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t235 = call i8* (i8*, i8*) @IO_out_string(i8* %t233, i8* %t234)
  %t236 = load i8*, i8** %t183
  %t237 = getelementptr [41 x i8], [41 x i8]* @.str6, i32 0, i32 0
  %t238 = call i8* (i8*, i8*) @IO_out_string(i8* %t236, i8* %t237)
  %t239 = load i8*, i8** %t183
  %t240 = load i8*, i8** %t184
  %t241 = call i32 (i8*, i32, i32, i32) @Calculator_selectOperation(i8* %t240, i32 0, i32 7, i32 3)
  %t242 = call i8* (i8*, i32) @IO_out_int(i8* %t239, i32 %t241)
  %t243 = load i8*, i8** %t183
  %t244 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t245 = call i8* (i8*, i8*) @IO_out_string(i8* %t243, i8* %t244)
  %t246 = load i8*, i8** %t183
  %t247 = getelementptr [45 x i8], [45 x i8]* @.str7, i32 0, i32 0
  %t248 = call i8* (i8*, i8*) @IO_out_string(i8* %t246, i8* %t247)
  %t249 = load i8*, i8** %t183
  %t250 = load i8*, i8** %t184
  %t251 = call i32 (i8*, i32, i32, i32) @Calculator_selectOperation(i8* %t250, i32 1, i32 7, i32 3)
  %t252 = call i8* (i8*, i32) @IO_out_int(i8* %t249, i32 %t251)
  %t253 = load i8*, i8** %t183
  %t254 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t255 = call i8* (i8*, i8*) @IO_out_string(i8* %t253, i8* %t254)
  %t256 = load i8*, i8** %t183
  %t257 = getelementptr [43 x i8], [43 x i8]* @.str8, i32 0, i32 0
  %t258 = call i8* (i8*, i8*) @IO_out_string(i8* %t256, i8* %t257)
  %t259 = load i8*, i8** %t183
  %t260 = load i8*, i8** %t184
  %t261 = call i32 (i8*, i32, i32) @Calculator_computeExpression(i8* %t260, i32 4, i32 5)
  %t262 = call i8* (i8*, i32) @IO_out_int(i8* %t259, i32 %t261)
  %t263 = load i8*, i8** %t183
  %t264 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
  %t265 = call i8* (i8*, i8*) @IO_out_string(i8* %t263, i8* %t264)
  %t266 = load i8*, i8** %t183
  %t267 = load i8*, i8** %t183
  ret i8* %t267
}


    ; Declare external functions
declare i32 @printf(i8*, ...)
declare i32 @scanf(i8*, ...)
declare i8* @malloc(i32)
declare void @exit(i32)

; String constants
@.fmt_str = private constant [4 x i8] c"%s\0A\00"
@.fmt_int = private constant [4 x i8] c"%d\0A\00"
@.fmt_scan_str = private constant [3 x i8] c"%s\00"
@.fmt_scan_int = private constant [3 x i8] c"%d\00"
@.empty_str = private constant [1 x i8] c"\00"

; Global buffer for input storage
@.input_buffer = global [256 x i8] zeroinitializer


; Entry point function
define i32 @main() {
  %mainObj = call i8* @Main_new()
  %t0 = call i8* @Main_main(i8* %mainObj)
  ret i32 0
}

; Object methods
define i8* @Object_abort(i8* %self) {
  call void @exit(i32 1)
  ret i8* %self
}

define i8* @Object_type_name(i8* %self) {
  ret i8* @.str0
}

define i8* @Object_copy(i8* %self) {
  ret i8* %self
}

; Output string method
define i8* @IO_out_string(i8* %self, i8* %x) {
  %fmt_ptr = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_str, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %fmt_ptr, i8* %x)
  ret i8* %self
}

; Output integer method
define i8* @IO_out_int(i8* %self, i32 %x) {
  %fmt_ptr = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_int, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %fmt_ptr, i32 %x)
  ret i8* %self
}

; Input string method (reads from user)
define i8* @IO_in_string(i8* %self) {
  %fmt_ptr = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_scan_str, i32 0, i32 0
  %buf_ptr = getelementptr inbounds [256 x i8], [256 x i8]* @.input_buffer, i32 0, i32 0
  call i32 (i8*, ...) @scanf(i8* %fmt_ptr, i8* %buf_ptr)
  ret i8* %buf_ptr
}

; Input integer method (reads from user)
define i32 @IO_in_int(i8* %self) {
  %fmt_ptr = getelementptr inbounds [3 x i8], [3 x i8]* @.fmt_scan_int, i32 0, i32 0
  %input = alloca i32
  call i32 (i8*, ...) @scanf(i8* %fmt_ptr, i32* %input)
  %result = load i32, i32* %input
  ret i32 %result
}

; String methods (stub implementations)
define i32 @String_length(i8* %self) {
  ret i32 999
}

define i8* @String_concat(i8* %self, i8* %s) {
  ret i8* %self
}

define i8* @String_substr(i8* %self, i32 %i, i32 %l) {
  ret i8* %self
}
    